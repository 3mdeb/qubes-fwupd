#!/bin/bash

escape_args() {
    local eargs=""

    for arg in "$@"; do
    printf -v eargs '%s%q ' "$eargs" "$arg"
    done

    echo "${eargs%?}"
}

find_regex_in_args() {
    local regex="${1}"
    shift 1

    for arg in "${@}"; do
        if echo "${arg}" | grep -q -e "${regex}"; then
            return 0
        fi
    done

    return 1
}

UPDATEVM=`qubes-prefs --force-root updatevm`
FWUPD_DOM0_RECEIVE="/usr/share/qubes-fwupd/src/./fwupd_receive_updates.py"
FWUPD_DOM0_DIR=/root/.cache/fwupd
FWUPD_UPDATEVM_DIR=/home/user/.cache/fwupd
FWUPD_UPDATEVM_SCRIPT="/usr/share/qubes-fwupd/fwupd-download-updates.sh"

if [ -z "$UPDATEVM" ]; then
    echo "UpdateVM not set, exiting"
    exit 1
fi

if [ "$1" = "--help" ]; then
    echo "This tool is used to download fwupd updates files."
    echo ""
    echo "Usage: $0 [--clean] [--metadata] [--update --url=... --sha=...] "
    echo "    --clean      clean cache before doing anything"
    echo "    --metadata   inits metadata download"
    echo "    --update     inits firmware update files download"
    echo "    --url=       firmware/metadata update url"
    echo "    --sha=       firmware update sha1 checksum"
    echo "    --whonix     download updates via Tor"
    exit
fi

CLEAN=
METADATA=
UPDATE=
URL=
SHASUM=
FW_NAME=

# Filter out some dnf options and collect packages list
while [ $# -gt 0 ]; do
    case "$1" in
        --clean)
            CLEAN=1
            ;;
        --metadata)
            METADATA=1
            ;;
        --update)
            UPDATE=1
            ;;
        --whonix)
            UPDATEVM=sys-whonix
            ;;
        --url=*)
            URL=${1#--url=}
            FW_NAME=${1#--url=https://fwupd.org/downloads/}
            ;;
        --sha=*)
            SHASUM=${1#--sha=}
            ;;
        *)
            echo "Command not found: $1"
            exit 1
            ;;
    esac
    shift
done

ID=$(id -ur)
if [ $ID != 0 ]; then
    echo "This script should be run as root (when used in console mode), use sudo." >&2
    exit 1
fi

if [ -n "$CLEAN" ]; then
    echo "Cleaning directories."
    rm -rf $FWUPD_DOM0_DIR/metadata
    rm -rf $FWUPD_DOM0_DIR/updates
fi

if [ "$UPDATE" == "1" ] && [[ -z "$URL" || -z "$SHASUM" ]]; then
    echo "Invalid update url or checksum." >&2
    exit 1
fi

if [[ -z "$UPDATE" && -z "$METADATA" ]]; then
    echo "No option chosen. Exiting..." >&2
    exit 1
fi

if ! xl list $UPDATEVM &>/dev/null ; then
    echo "$UPDATEVM is not running. Exiting..." >&2
    exit 1
fi

if [[ "$URL" == *"&"* ]]; then
    echo -e "\033[33mWARNING: Special characters in the update URL\033[0m"
    URL=${URL//&/--and--}
    FW_NAME="untrusted.cab"
fi

if [[ "$URL" == *"%20"* ]]; then
    echo -e "\033[33mWARNING: Special characters in the update URL\033[0m"
    FW_NAME="untrusted.cab"
fi

if [[ "$URL" == *"|"* ]]; then
    URL=${URL//|/--or--}
    echo -e "\033[33mWARNING: Special characters in the update URL\033[0m"
    FW_NAME="untrusted.cab"
fi

if [[ "$URL" == *"#"* ]]; then
    URL=${URL//#/--hash--}
    echo -e "\033[33mWARNING: Special characters in the update URL\033[0m"
    FW_NAME="untrusted.cab"
fi

# Set ownership
[[ -d $FWUPD_DOM0_DIR ]] || mkdir $FWUPD_DOM0_DIR
chown -R root:qubes $FWUPD_DOM0_DIR

echo "Using $UPDATEVM as UpdateVM to download fwupd updates for Dom0; this may take some time..." >&2

# qvm-run by default auto-starts the VM if not running
qvm-run --nogui -q -u root $UPDATEVM "mkdir -m 775 -p $FWUPD_UPDATEVM_DIR/metadata" || exit 1
qvm-run --nogui -q -u root $UPDATEVM "mkdir -m 775 -p $FWUPD_UPDATEVM_DIR/updates" || exit 1
qvm-run --nogui -q -u root $UPDATEVM "chown -R user:user $FWUPD_UPDATEVM_DIR" || exit 1

# Setup fwupd-download-updates commandline
if [ "$METADATA" == 1 ]; then
    rm -rf $FWUPD_DOM0_DIR/metadata
    FWUPD_UPDATEVM_SCRIPT_ARGS="--metadata"
    FWUPD_DOM0_RECEIVE_ARGS="metadata"
    if [ -n "$URL" ]; then
        FWUPD_UPDATEVM_SCRIPT_ARGS="--metadata --url=$URL"
        FWUPD_DOM0_RECEIVE_ARGS="metadata --url=$URL"
    fi
elif [ "$UPDATE" == 1 ]; then
    FW_DIR=$FWUPD_DOM0_DIR/updates/$FW_NAME
    if [ -d "${FW_DIR::-4}" ]; then
        echo "Firmware already downloaded. Using cached files." >&2
        exit 0
    else
        FWUPD_UPDATEVM_SCRIPT_ARGS="--url=$URL --sha=$SHASUM"
        FWUPD_DOM0_RECEIVE_ARGS="update $SHASUM $FW_NAME"
    fi
fi

# Use 'script' to fake a terminal, so that we are shown sync and download
# progress indicators. However, do it only if we are running in terminal
# ourselves.
CMD="script --quiet --return --command '$FWUPD_UPDATEVM_SCRIPT \
    $FWUPD_UPDATEVM_SCRIPT_ARGS' /dev/null"
qvm-run --nogui --pass-io $UPDATEVM "$CMD"

RETCODE=$?
if [ "$RETCODE" -ne 0 ]; then
    exit $RETCODE
fi

# Wait for download completed
$FWUPD_DOM0_RECEIVE $UPDATEVM $FWUPD_DOM0_RECEIVE_ARGS

if [ "$?" -ne 0 ]; then
    echo "*** ERROR while receiving fwupd updates"
    rm -rf $FWUPD_DOM0_DIR/metadata
    rm -rf $FWUPD_DOM0_DIR/updates
    exit 1
fi

exit 0
